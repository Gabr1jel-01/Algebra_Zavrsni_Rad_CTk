import tkinter as tk 
from PIL import Image, ImageTk
from tkinter import messagebox
import customtkinter as ctk
import pictures
import sqlite3
import bcrypt

class App(ctk.CTk):
        
    def __init__(self):
        super().__init__()
        
        
        #configure window
        self.window = ctk.CTk()

        # visina i sirina prozora te fiksna pozicija gdje se prozor otvara na ekranu korisnika
        self.window.geometry(f"{900}x{600}") 

        # naslov prozora (nalazi se u obrubu aplikacije)
        self.window.title('PyFlora Posude') 

        # slika aplikacije
        self.window.iconbitmap('pictures/app_flower_picture.ico')  

        # ovdje postavljamo pozadinu prozora
        self.window.config(background="#e6e6fa") 

        # prozor se nece moci povecati ili smanjiti
        self.window.resizable(False,False) 

        # kanvas za postavljanje slike koja se nalazi ispod svega
        self.canvas_for_back_image = tk.Canvas(self,                
                                            height=2000,
                                            width=2000,
                                            bg='#e6e6fa',
                                            highlightthickness=0
                                            )

        # prikazivanje tog kanvasa u glavnom prozoru aplikacije
        self.canvas_for_back_image.pack(expand=True, fill='both')

        #postavljanje dviju slika na kanvas u kojem je pozadina
        self.person_at_table_img = ImageTk.PhotoImage(Image.open("pictures/vector.png"))
        self.avatar_image = ImageTk.PhotoImage(Image.open("pictures/hyy.png"))
        
        
        self.canvas_for_back_image.create_image(150,600,anchor='w',image=self.person_at_table_img)
        self.canvas_for_back_image.create_image(930,120,anchor='w',image=self.avatar_image)

        

        # konfiguriranje sql baze
        
        self.sql_connection = sqlite3.connect('database.db')
        self.cursor = self.sql_connection.cursor()
                
        self.cursor.execute('''
                    CREATE TABLE IF NOT EXISTS users (
                        username TEXT NOT NULL,
                        password TEXT NOT NULL)''')
                        
        # Labela
        self.sign_up_label_big = ctk.CTkLabel(self,
                                    text="PyFlora",
                                    font=('Verdana', 50),
                                    fg_color="#e6e6fa",
                                    text_color="#000000"
                                    )
        # postavljanje Labele na glavni prozor
        self.sign_up_label_big.place(relx=0.63,rely=0.25)

        # Labela
        self.welcome_label = ctk.CTkLabel(self,
                                    text="Welcome",
                                    font=('Verdana Pro', 65),
                                    fg_color="#e6e6fa",
                                    text_color="#000000"
                                    )
        # postavljanje Labele na glavni prozor
        self.welcome_label.place(relx=0.10,rely=0.13)

        # region FUNKCIJE
        def sign_me_in_action():
            username = self.username_entry_box.get()
            password = self.password_entry_box.get()
            
            if username !='' and password != '':
                self.cursor.execute('SELECT username FROM users WHERE username = ?', [username])
                if self.cursor.fetchone() is not None:
                        messagebox.showerror('Greska', 'Korisnicko ime vec postoji!')
                        result = self.cursor.fetchone()
                        print(result)           
                    
                else:
                    encoded_password = password.encode('utf-8')
                    hashed_password = bcrypt.hashpw(encoded_password, bcrypt.gensalt())
                    #print(hashed_password)
                    self.cursor.execute('INSERT INTO users VALUES (?,?)', [username, hashed_password])
                    self.sql_connection.commit()
                    messagebox.showinfo('Uspjeh', 'Korisnicki racun je napravljen!')
            else:
                messagebox.showerror('Greska', 'Unesite potrebne podatke')
            if self.cursor.fetchone() is not None:
                result = self.cursor.fetchone()

        def log_me_in_action():
            pass
        #endregion

        # Labela
        self.username_label = ctk.CTkLabel(self.window,
                                    text="Username:",
                                    font=('Verdana', 25),
                                    fg_color="#e6e6fa",
                                    text_color="#000000"
                                    )
        # postavljanje Labele
        self.username_label.place(relx=0.6,rely=0.4)

        # Entry za unos podataka
        self.username_entry_box = ctk.CTkEntry(self,
                                        width=250,
                                        fg_color='white',
                                        bg_color='#e6e6fa',
                                        corner_radius=30,
                                        text_color='#000000'
                                        )
        # postavljanje Entrya za unos podataka na glavni prozor
        self.username_entry_box.place(relx=0.59, rely=0.48)

        # Labela
        self.username_label = ctk.CTkLabel(self,
                                    text="Password:",
                                    font=('Verdana', 25),
                                    fg_color="#e6e6fa",
                                    text_color="#000000"
                                    )
        # postavljanje Labele na glavni prozor
        self.username_label.place(relx=0.6,rely=0.55)

        # Entry za unos podataka 
        self.password_entry_box = ctk.CTkEntry(self,
                                        width=250,
                                        fg_color='white',
                                        bg_color='#e6e6fa',
                                        corner_radius=30,
                                        text_color='#000000',
                                        show="â€¢"
                                        )
        # postavljanje Entrya za unos podataka na glavni prozor 
        self.password_entry_box.place(relx=0.59, rely=0.62)

        # Button
        self.sign_me_in_button = ctk.CTkButton(self,
                                        text='Sign up',
                                        text_color='#000000',
                                        width=200,
                                        height=50,
                                        font=('Verdana',25),
                                        corner_radius=30,
                                        bg_color='#e6e6fa',
                                        fg_color='#98b4d4',
                                        hover_color='#4c5578',
                                        command=sign_me_in_action)

        # postavljanje Buttona na glavni prozor
        self.sign_me_in_button.place(relx=0.61, rely=0.8)

# glavna petlja koja konstantno pokrece program tj program se ne gasi dok se ne stisne X
if __name__ == "__main__":
    app = App()
    app.mainloop()
    
    
    
    
    
import tkinter as tk
from PIL import Image, ImageTk
from tkinter import messagebox
import customtkinter as ctk
import sqlite3
import bcrypt


class App:
    def __init__(self):
        # Configure window
        self.window = ctk.CTk()
        self.window.geometry("900x600+325+40")
        self.window.title('PyFlora Posude')
        self.window.iconbitmap('pictures/app_flower_picture.ico')
        self.window.config(background="#e6e6fa")
        self.window.resizable(False, False)

        # Canvas for background image
        self.canvas_for_back_image = ctk.CTkCanvas(self.window,
                                                   height=2000,
                                                   width=2000,
                                                   bg='#e6e6fa',
                                                   highlightthickness=0)
        self.canvas_for_back_image.pack(expand=True, fill='both')

        # Load and display background images
        self.person_at_table_img = ImageTk.PhotoImage(Image.open("pictures/vector.png"))
        self.avatar_image = ImageTk.PhotoImage(Image.open("pictures/hyy.png"))
        self.canvas_for_back_image.create_image(150, 600, anchor='w', image=self.person_at_table_img)
        self.canvas_for_back_image.create_image(930, 120, anchor='w', image=self.avatar_image)

        # Configure SQL database
        self.sql_connection = sqlite3.connect('database.db')
        self.cursor = self.sql_connection.cursor()

        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                username TEXT NOT NULL,
                password TEXT NOT NULL)''')

        # Labels
        self.sign_up_label_big = ctk.CTkLabel(self.window,
                                              text="PyFlora",
                                              font=('Verdana', 50),
                                              fg_color="#e6e6fa",
                                              text_color="#000000")
        self.sign_up_label_big.place(relx=0.64, rely=0.25)

        self.welcome_label = ctk.CTkLabel(self.window,
                                          text="Welcome",
                                          font=('Verdana Pro', 65),
                                          fg_color="#e6e6fa",
                                          text_color="#000000")
        self.welcome_label.place(relx=0.10, rely=0.13)

        # Entry boxes
        self.username_entry_box = ctk.CTkEntry(self.window,
                                               width=250,
                                               fg_color='white',
                                               bg_color='#e6e6fa',
                                               corner_radius=30,
                                               text_color='#000000')
        self.username_entry_box.place(relx=0.59, rely=0.48)

        self.password_entry_box = ctk.CTkEntry(self.window,
                                               width=250,
                                               fg_color='white',
                                               bg_color='#e6e6fa',
                                               corner_radius=30,
                                               text_color='#000000',
                                               show="â€¢")
        self.password_entry_box.place(relx=0.59, rely=0.62)

        # Button
        self.sign_me_in_button = ctk.CTkButton(self.window,
                                               text='Sign up',
                                               text_color='#000000',
                                               width=200,
                                               height=50,
                                               font=('Verdana', 25),
                                               corner_radius=30,
                                               bg_color='#e6e6fa',
                                               fg_color='#98b4d4',
                                               hover_color='#4c5578',
                                               command=self.sign_me_in_action)
        self.sign_me_in_button.place(relx=0.61, rely=0.8)

    def sign_me_in_action(self):
        username = self.username_entry_box.get()
        password = self.password_entry_box.get()

        if username != '' and password != '':
            self.cursor.execute('SELECT username FROM users WHERE username = ?', [username])
            if self.cursor.fetchone() is not None:
                messagebox.showerror('Greska', 'Korisnicko ime vec postoji!')
                result = self.cursor.fetchone()
                print(result)
            else:
                encoded_password = password.encode('utf-8')
                hashed_password = bcrypt.hashpw(encoded_password, bcrypt.gensalt())
                self.cursor.execute('INSERT INTO users VALUES (?,?)', [username, hashed_password])
                self.sql_connection.commit()
                messagebox.showinfo('Uspjeh', 'Korisnicki racun je napravljen!')
        else:
            messagebox.showerror('Greska', 'Unesite potrebne podatke')
        if self.cursor.fetchone() is not None:
            result = self.cursor.fetchone()

    def run(self):
        # Run the main loop
        self.window.mainloop()


if __name__ == '__main__':
    app = App()
    app.run()
